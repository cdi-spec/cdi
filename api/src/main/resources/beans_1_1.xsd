<?xml version="1.0" encoding="UTF-8"?>

   <!--
      JBoss, Home of Professional Open Source Copyright 2008, Red Hat
      Middleware LLC, and individual contributors by the @authors tag.
      See the copyright.txt in the distribution for a full listing of
      individual contributors. Licensed under the Apache License,
      Version 2.0 (the "License"); you may not use this file except in
      compliance with the License. You may obtain a copy of the License
      at http://www.apache.org/licenses/LICENSE-2.0 Unless required by
      applicable law or agreed to in writing, software distributed under
      the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
      OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and
      limitations under the License.
   -->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
   elementFormDefault="qualified" targetNamespace="http://java.sun.com/xml/ns/javaee"
   xmlns:javaee="http://java.sun.com/xml/ns/javaee" version="1.1">

   <xs:annotation>
      <xs:documentation>
         Contexts and Dependency Injection (CDI) defines
         a set of complementary services that help improve the structure
         of application code. beans.xml is used to enable CDI services
         for the current bean archive as well as to enable named
         interceptors, decorators and alternatives for the current bean
         archive.
      </xs:documentation>
   </xs:annotation>

   <xs:element name="beans">
      <xs:annotation>
         <xs:documentation>
            Bean classes of enabled beans must be
            deployed in bean archives. A library jar, EJB jar,
            application client jar or rar archive is a bean archive if
            it has a file named beans.xml in the META-INF directory. The
            WEB-INF/classes directory of a war is a bean archive if
            there is a file named beans.xml in the WEB-INF directory of
            the war. A directory in the JVM classpath is a bean archive
            if it has a file named beans.xml in the META-INF directory.
         </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="javaee:interceptors" />
            <xs:element ref="javaee:decorators" />
            <xs:element ref="javaee:alternatives" />
            <xs:any namespace="##other" processContents="lax"/>
         </xs:choice>
      </xs:complexType>
   </xs:element>

   <xs:element name="interceptors">
      <xs:annotation>
         <xs:documentation>
            Interceptors may be enabled for an application, or enabled only for
            a particular bean archive. The priority of the interceptor 
            declaration, determines the default interceptor ordering for the 
            application. The order of the interceptor declarations for a bean 
            archive overrides the default interceptor order. If the set of 
            interceptors enabled for the application and the set of 
            interceptors enabled for a bean archive are disjoint, then the 
            interceptors enabled for the bean archive are given an incrementing 
            priority starting at 1000. Interceptors which occur earlier in the 
            list are called first.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="class">
               <xs:annotation>
                  <xs:documentation>
                     Each child &lt;class&gt; element must specify the name of 
                     an interceptor class. If only the name of class is 
                     specified with no attributes, the interceptor is enabled 
                     for the bean archive only. If there is no class with the 
                     specified name, or if the class with the specified name is 
                     not an interceptor class, the container automatically 
                     detects the problem and treats it as a deployment problem.
                  </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:simpleContent>
                  <xs:extension base="xs:string">
                  <xs:attribute name="priority" type="xs:nonNegativeInteger">
                     <xs:annotation>
                        <xs:documentation>
                            An interceptor may be enabled for the entire 
                            application by listing its class, along with a 
                            priority attribute. An interceptor may be given a 
                            default priority, but not enabled by listing its 
                            class, along with a disabled flag and the priority 
                            attribute.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="enabled" type="xs:boolean">
                     <xs:annotation>
                        <xs:documentation>
                            An interceptor enabled for an application may be 
                            disabled for a bean archive by specifying it's
                            class name and enabled="false". An interceptor with 
                            a default priority may be enabled for a bean archive
                            by listing its class name, along with an enabled 
                            flag.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  </xs:extension>
                  </xs:simpleContent>
               </xs:complexType>
            </xs:element>
         </xs:choice>
      </xs:complexType>
   </xs:element>

   <xs:element name="decorators">
      <xs:annotation>
         <xs:documentation>
            Decorators may be enabled for an application, or enabled only for a 
            particular bean archive. The priority of the decorator declaration
            determines the default decorator ordering for the application. The
            order of the decorator declarations for a bean archive overrides the
            default decorator order. If the set of decorators enabled for the 
            application and the set of decorators enabled for a bean archive are
            disjoint, then the first decorator enabled for the bean archive is 
            given a priority of 1000. Decorators which occur earlier in the list
            are called first.
         </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="class">
               <xs:annotation>
                  <xs:documentation>
                     Each child &lt;class&gt; element must specify the name of a
                     decorator class. If only the name of class is specified 
                     with no attributes, the decorator is enabled for the bean 
                     archive only. If there is no class with the specified name,
                     or if the class with the specified name is not a decorator 
                     class, the container automatically detects the problem and 
                     treats it as a deployment problem.
                  </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:simpleContent>
                  <xs:extension base="xs:string">
                  <xs:attribute name="priority" type="xs:nonNegativeInteger">
                     <xs:annotation>
                        <xs:documentation>
                            A decorator may be enabled for the entire 
                            application by listing its class, along with a 
                            priority attribute. A decorator may be given a 
                            default priority, but not enabled by listing its 
                            class, along with a disabled flag and the priority 
                            attribute.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="enabled" type="xs:boolean">
                     <xs:annotation>
                        <xs:documentation>
                            A decorator enabled for an application may be 
                            disabled for a bean archive by listing its class
                            name and enabled="false". A decorator with a default
                             priority may be enabled for a bean archive by 
                             listing its class, along with an enabled flag.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  </xs:extension>
                  </xs:simpleContent>
               </xs:complexType>
            </xs:element>
         </xs:choice>
      </xs:complexType>
   </xs:element>

   <xs:element name="alternatives">
      <xs:annotation>
         <xs:documentation>
            An alternative is a bean that must be selected if it should be
            available for lookup, injection or EL resolution. Alternatives may 
            be selected for an application, or selected only for a particular 
            bean archive. The &lt;alternatives&gt; element contains a list of 
            bean classes and stereotypes. An alternative is selected if either:
            the alternative is a managed bean or session bean and the bean class
            of the bean is listed, or the alternative is a producer method,
            field or resource, and the bean class that declares the method or 
            field is listed, or any @Alternative stereotype of the alternative 
            is listed.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="class">
               <xs:annotation>
                  <xs:documentation>
                     Each child &lt;class&gt; element must specify the name of 
                     an alternative bean class. If only the name of class is 
                     specified with no attributes, the alternative is selected
                     for the bean archive only. If there is no class with the 
                     specified name, or if the class with the specified name is 
                     not an alternative bean class, the container automatically
                     detects the problem and treats it as a deployment problem. 
                     If the same class is listed twice under the 
                     &lt;alternatives&gt; element, the container automatically 
                     detects the problem and treats it as a deployment problem.
                  </xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:simpleContent>
                  <xs:extension base="xs:string">
                  <xs:attribute name="priority" type="xs:nonNegativeInteger">
                     <xs:annotation>
                        <xs:documentation>
                            An alternative may be selected for the entire 
                            application by listing its class, along with a 
                            priority attribute. An alternative may be given a 
                            default priority, but not selected by listing its 
                            class, along with a disabled flag and the priority 
                            attribute.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="enabled" type="xs:boolean">
                     <xs:annotation>
                        <xs:documentation>
                            An alternative selected for an application may be 
                            deselected for a bean archive by listing a class and
                            the enabled="false" attribute. An alternative with a 
                            default priority may be selected for a bean archive 
                            by listing a class and the enabled="true" attribute.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  </xs:extension>
                  </xs:simpleContent>
               </xs:complexType>
            </xs:element>

            <xs:element name="stereotype">
               <xs:annotation>
                  <xs:documentation>
                     Each child &lt;stereotype&gt;
                     element must specify the name of an @Alternative
                     stereotype annotation. If there is no annotation
                     with the specified name, or the annotation is not
                     an @Alternative stereotype, the container
                     automatically detects the problem and treats it as
                     a deployment problem. If the same stereotype is
                     listed twice under the &lt;alternatives&gt;
                     element, the container automatically detects the
                     problem and treats it as a deployment problem.
                  </xs:documentation>
               </xs:annotation>
               <xs:complexType>
               <xs:simpleContent>
                  <xs:extension base="xs:string">
                  <xs:attribute name="priority" type="xs:nonNegativeInteger">
                     <xs:annotation>
                        <xs:documentation>
                            An alternative may be selected for the entire 
                            application by listing a stereotype, along with a 
                            priority attribute. An alternative may be given a 
                            default priority, but not selected by listing a
                            stereotype, along with a disabled flag and the 
                            priority attribute.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="enabled" type="xs:boolean">
                     <xs:annotation>
                        <xs:documentation>
                            An alternative selected for an application may be 
                            deselected for a bean archive by listing a 
                            stereotype and the enabled="false" attribute. An 
                            alternative with a default priority may be selected 
                            for a bean archive by listing a stereotype and the 
                            enabled="true" attribute.
                        </xs:documentation>
                     </xs:annotation>
                  </xs:attribute>
                  </xs:extension>
                  </xs:simpleContent>
               </xs:complexType>
            </xs:element>
         </xs:choice>
      </xs:complexType>
   </xs:element>

</xs:schema>
